# Generated by Django 4.2.23 on 2025-09-18 08:45

import arexp.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ARExperience",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Name of the AR experience", max_length=200
                    ),
                ),
                ("slug", models.SlugField(blank=True, unique=True)),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of the AR experience"
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        help_text="Image to be used as AR marker (Python OpenCV processing)",
                        upload_to=arexp.models.ar_marker_image_path,
                    ),
                ),
                (
                    "video",
                    models.FileField(
                        help_text="Video to overlay on detected marker (required for Python AR)",
                        upload_to=arexp.models.ar_video_path,
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=["mp4", "mov", "webm"]
                            )
                        ],
                    ),
                ),
                (
                    "marker_data",
                    models.JSONField(
                        blank=True,
                        help_text="Python OpenCV marker keypoints and descriptors (auto-generated)",
                        null=True,
                    ),
                ),
                (
                    "processing_method",
                    models.CharField(
                        choices=[
                            ("python_opencv", "Python + OpenCV"),
                            ("mindar_js", "MindAR JavaScript (legacy)"),
                        ],
                        default="python_opencv",
                        help_text="AR processing method used",
                        max_length=50,
                    ),
                ),
                (
                    "tracking_quality",
                    models.FloatField(
                        default=0.0, help_text="Marker tracking quality score (0-10)"
                    ),
                ),
                (
                    "feature_count",
                    models.IntegerField(
                        default=0,
                        help_text="Number of detected features in marker image",
                    ),
                ),
                (
                    "processing_time",
                    models.FloatField(
                        default=0.0, help_text="Time taken to process marker (seconds)"
                    ),
                ),
                (
                    "overlay_scale",
                    models.FloatField(
                        default=1.0,
                        help_text="Scale factor for video overlay (0.1-3.0)",
                    ),
                ),
                (
                    "overlay_opacity",
                    models.FloatField(
                        default=0.8, help_text="Opacity of video overlay (0.0-1.0)"
                    ),
                ),
                (
                    "detection_sensitivity",
                    models.FloatField(
                        default=0.7, help_text="Marker detection sensitivity (0.1-1.0)"
                    ),
                ),
                (
                    "max_features",
                    models.IntegerField(
                        default=1000,
                        help_text="Maximum features to detect for tracking",
                    ),
                ),
                (
                    "processing_fps",
                    models.IntegerField(
                        default=30, help_text="Target FPS for AR processing"
                    ),
                ),
                (
                    "ar_sessions_count",
                    models.IntegerField(
                        default=0, help_text="Number of AR sessions started"
                    ),
                ),
                (
                    "successful_detections",
                    models.IntegerField(
                        default=0, help_text="Number of successful marker detections"
                    ),
                ),
                (
                    "failed_detections",
                    models.IntegerField(
                        default=0, help_text="Number of failed marker detections"
                    ),
                ),
                (
                    "average_detection_time",
                    models.FloatField(
                        default=0.0,
                        help_text="Average time to detect marker (milliseconds)",
                    ),
                ),
                (
                    "nft_iset_file",
                    models.FileField(
                        blank=True,
                        editable=False,
                        help_text="Legacy: not used in Python AR",
                        null=True,
                        upload_to=arexp.models.ar_processed_video_path,
                    ),
                ),
                (
                    "marker_generated",
                    models.BooleanField(
                        default=False,
                        help_text="Whether Python AR marker processing is complete",
                    ),
                ),
                (
                    "content_text",
                    models.TextField(
                        blank=True, help_text="Optional text content to display"
                    ),
                ),
                (
                    "content_url",
                    models.URLField(blank=True, help_text="URL to additional content"),
                ),
                (
                    "marker_size",
                    models.FloatField(
                        default=1.0, help_text="Size of the marker in AR space"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this experience is active"
                    ),
                ),
                (
                    "qr_code",
                    models.FileField(
                        blank=True, null=True, upload_to=arexp.models.ar_qr_path
                    ),
                ),
                (
                    "view_count",
                    models.IntegerField(
                        default=0,
                        help_text="Number of times this experience has been viewed",
                    ),
                ),
                (
                    "visibility",
                    models.CharField(
                        default="public",
                        help_text="Visibility setting for the experience",
                        max_length=20,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        help_text="Optional user who created this AR experience",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Python AR Experience",
                "verbose_name_plural": "Python AR Experiences",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Upload",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "target_name",
                    models.CharField(
                        db_index=True,
                        help_text="8th Wall Image Target name",
                        max_length=100,
                    ),
                ),
                ("image", models.ImageField(upload_to=arexp.models.upload_image_path)),
                (
                    "video",
                    models.FileField(
                        upload_to=arexp.models.upload_video_path,
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=["mp4", "mov", "webm"]
                            )
                        ],
                    ),
                ),
                ("slug", models.SlugField(blank=True, max_length=100, unique=True)),
                ("uploaded_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "ordering": ["-uploaded_at"],
            },
        ),
        migrations.CreateModel(
            name="ARSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("session_id", models.UUIDField(default=uuid.uuid4, unique=True)),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("ended_at", models.DateTimeField(blank=True, null=True)),
                ("detections_attempted", models.IntegerField(default=0)),
                ("detections_successful", models.IntegerField(default=0)),
                ("duration_seconds", models.FloatField(default=0.0)),
                ("user_agent", models.TextField(blank=True)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                (
                    "experience",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sessions",
                        to="arexp.arexperience",
                    ),
                ),
            ],
            options={
                "ordering": ["-started_at"],
            },
        ),
    ]
